@using WebApp.Models.Dtos.UserDtos
@using WebApp.Models.Dtos.WordDtos;
@using WebApp.Models.Pagination;
@using WebApp.ViewModels
@model WebApp.ViewModels.UserIndexViewModel

@{
    Paginate<UserDetailResponseDto> Resource = Model.Resource!; 

    var sortList = (List<SelectListItem>)ViewBag.SortList;
    var selectedSort = sortList.Where(i => i.Selected).FirstOrDefault();


    var sizeQuery = Context.Request.Query.Where(q => q.Key == "size");
    string? currentSize = (sizeQuery != null && sizeQuery.Any()) ? sizeQuery.FirstOrDefault().Value : string.Empty;
}

<nav aria-label="breadcrumb">
    <ol class="breadcrumb ml-4 mb-5">
        <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index" class="text-decoration-none">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Users</li>
    </ol>
</nav>

<div class="row g-3 p-3 border rounded-3 shadow bg-light">
    <div class="col-12 border-bottom">
        <span class="fw-bold text-secondary fs-2">User List </span>
    </div> 
    <div class="col-lg-3 d-flex flex-column g-3 p-3 shadow-sm rounded-3 border bg-white"> 
        <form action="@Model.CreateFormUrl(Context.Request)" method="get">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="mb-3 pb-3 border-bottom">
                <label asp-for="FilterModel!.SearchName" class="form-label">Search</label>
                <input asp-for="FilterModel!.SearchName" class="form-control" placeholder="Search">
                <span asp-validation-for="FilterModel!.SearchName" class="text-danger"></span>
            </div>
            <div class="mb-3 pb-3 border-bottom">
                <label asp-for="FilterModel!.RoleIdList" class="form-label">Role</label>
                <select asp-for="FilterModel!.RoleIdList" asp-items="@ViewBag.RoleSelectList" multiple class="selectpicker" data-width="100%" data-live-search="true" data-size="10" data-style="btn-outline-secondary" title="Seçiniz"></select>
                <span asp-validation-for="FilterModel!.RoleIdList" class="text-danger"></span>
            </div>
            <button type="submit" class="btn btn-lg btn-success w-100"><i class="fa-solid fa-search"></i></button>
        </form>
    </div>
    <div class="col-lg-9"> 
        <div class="d-flex justify-content-between">
            <div class="dropdown">
                <a class="btn btn-secondary  btn-sm dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                    @((selectedSort != null) ? selectedSort.Text : "Order by")
                </a>
                <ul class="dropdown-menu">
                    @foreach (var item in sortList)
                    {
                        <li><a href="@Model.CreateSortUrl(Context.Request, item.Value)" class="dropdown-item @(item.Selected ? "active" :"")">@item.Text</a></li>
                    }
                </ul>
            </div>
            @if (User.IsInRole("Admin"))
            {
                <a asp-controller="User" asp-action="CreateAuthorized" class="btn btn-sm btn-outline-primary shadow-sm fw-bold border-2">
                    Create New Authorized <i class="fa-solid fa-user ms-2"></i>
                </a>
            }
        </div>
        <table class="table table-hover p-3 shadow-sm rounded-3 border bg-white my-3">
            <thead>
                <tr>
                    <th scope="col"></th>
                    <th scope="col">Id</th>
                    <th scope="col">Full Name</th>
                    <th scope="col">Email</th>
                    <th scope="col">Roles</th>
                    @if (User.IsInRole("Admin")){
                        <th scope="col">Change Roles</th> 
                    }
                </tr>
            </thead>
            <tbody class="table-group-divider">
                @{
                    int count = 1;
                    @foreach (var userDetailDto in Resource.Items)
                    {
                        <tr>
                            <th scope="row">@count</th>
                            <td>@userDetailDto.Id</td>
                            <td>@userDetailDto.FullName</td>
                            <td>@userDetailDto.Email</td>
                            <td style="font-size: 0.7rem;">
                                 
                                @if (userDetailDto.Roles != null && userDetailDto.Roles.Count > 0)
                                {
                                    foreach (var role in userDetailDto.Roles!)
                                    {
                                        <span class="badge rounded-pill bg-@(role.Name == "Admin" ? "danger" : role.Name == "Authorized" ? "primary ": "warning" )">@role.Name</span>
                                        
                                    }
                                }
                            </td>
                            @if (User.IsInRole("Admin"))
                            {
                                <td class="text-center">    
                                    <a asp-controller="User" asp-action="EditUserAuthorization" asp-route-userId="@userDetailDto.Id" asp-route-userName="@userDetailDto.FullName" class="btn btn-sm btn-outline-primary shadow-sm" title="Change Roles"><i class="fa-solid fa-address-card"></i></a>
                                </td>
                            }
                        </tr>
                        count += 1;
                    }
                }
            </tbody>
        </table>
        <div class="d-flex justify-content-center my-3">
            <ul class="d-flex gap-3" style="list-style:none;">
                @{
                    int MaxIndex = Resource.Pages-1;
                    int htmlMaxIndex = Resource.Pages;
                    int CurrentIndex = Resource.Index;
                    for (var index = 0; index <= MaxIndex; index++)
                    {
                        int htmlIndex = index + 1;

                        if (index == CurrentIndex)
                        {
                            <li class="page-item"><a href="@Model.CreatePageUrl(Context.Request, index)" class="page-link bg-dark text-light" style="border-radius:0.7rem;">@htmlIndex</a></li>
                        }
                        else if (index < CurrentIndex && CurrentIndex - index > 3)
                        {

                            <li class="page-item"><a href="@Model.CreatePageUrl(Context.Request, 0)" class="page-link text-dark border-0">1</a></li>
                            <li class="page-item"><span class="page-link text-dark border-0">...</span></li>
                           
                            index = CurrentIndex - 2;
                        }
                        else if (index > CurrentIndex && index - CurrentIndex > 3)
                        {
                            if (index != MaxIndex)
                            {
                                <li class="page-item"><span class="page-link text-dark border-0 ">...</span></li>
                            }
                            <li class="page-item"><a href="@Model.CreatePageUrl(Context.Request, MaxIndex)" class="page-link text-dark border-0">@htmlMaxIndex</a></li>
                            break;
                        }
                        else
                        {
                            <li class="page-item"><a href="@Model.CreatePageUrl(Context.Request, index)" class="page-link text-dark border-0">@htmlIndex</a></li>
                        }  
                    }
                }
            </ul>
        </div>

        <div>
            <label class="text-info d-block mb-1" style="font-size:0.65rem;">Word count per page</label>
            <div class="btn-group" role="group" aria-label="Basic radio toggle button group">
                <input type="radio" class="btn-check" name="btnradio" id="btnradio1" autocomplete="off" @(currentSize != string.Empty && currentSize == "2" ? "checked" : "c")>
                <label class="btn btn-sm btn-outline-primary px-0" for="btnradio1"><a href="@Model.CreateSizeUrl(Context.Request, 2)" class="text-decoration-none px-3 @(currentSize != string.Empty && currentSize == "2" ? "text-light" : "")">2</a></label>

                <input type="radio" class="btn-check" name="btnradio" id="btnradio3" autocomplete="off" @(currentSize != string.Empty && currentSize == "3" ? "checked" : "c")>
                <label class="btn btn-sm btn-outline-primary px-0" for="btnradio3"> <a href="@Model.CreateSizeUrl(Context.Request, 3)" class="text-decoration-none px-3 @(currentSize != string.Empty && currentSize == "3" ? "text-light" : "")">3</a></label>
            </div>
        </div>
    </div>
</div>



 
 

@* 


@using WebApp.Models.Dtos.UserDtos
@model List<UserResponseDto>

@if (User.IsInRole("Admin"))
{
    <a asp-controller="User" asp-action="CreateAuthorized" class="btn btn-light shadow-sm text-secondary">
        Create New Authorized <i class="fa-solid fa-plus-circle ml-2" ></i>
    </a>
}

<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Id</th>
            <th scope="col">Full Name</th>
            <th scope="col">Email</th>
        </tr>
    </thead>
    <tbody class="table-group-divider">
        @{
            int index = 1;
            @foreach (var item in Model)
            {
                <tr>
                    <th scope="row">@index</th>
                    <td>@item.Id</td>
                    <td>@item.FullName</td>
                    <td>@item.Email</td>
                </tr>
                index += 1;
            }
        }
    </tbody>
</table> *@

